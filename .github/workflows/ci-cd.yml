name: Test build and deploy application
on: 
 workflow_dispatch:

 push:
  branches: 
    - main
 pull_request:
  branches:
    - main
jobs:
 test:
  runs-on: ubuntu-latest

  steps:
  - name: Checkout code
    uses: actions/checkout@v4
  - name: Cache python dependencies
    uses: actions/cache@v4
    with:
      path: ~/.cache/pip
      key: ${{ runner.os}}-pip-{{ hashFiles('**/requirements.txt') }}
      restore-keys:
       ${{ runner.os }}-pip-
  - name: set up JDK 21
    uses: actions/setup-java@v3
    with:
      java-version: '21'
      distribution: 'temurin'
  - name: Set up Python
    uses: actions/setup-python@v4
    with:
        python-version: '3.11' 
  - name: Install dependencies
    run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
  - name: Run tests with coverage
    run: |
        pip install pytest pytest-cov
        pytest tests --cov=app --cov-report=xml:coverage.xml
  - name: Upload coverage report
    uses: actions/upload-artifact@v4
    with:
      name: coverage-report
      path: coverage.xml
        
 sonarqube:
  runs-on: ubuntu-latest
  needs: test
  steps:  
  - name: Checkout code
    uses: actions/checkout@v4
  - name: download coverage report
    uses: actions/download-artifact@v4
    with:
      name: coverage-report
  - name: SonarCloud Scan
    uses: sonarsource/sonarqube-scan-action@v5.2.0
    env:
        GITHUB_TOKEN: ${{ secrets._GITHUB_PAT }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    with:
      args: >
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.projectName=${{ github.event.repository.name }}
          -Dsonar.python.version=3.11
          -Dsonar.sources=app
          -Dsonar.tests=tests
          -Dsonar.python.coverage.reportPaths=coverage.xml
 docker:
  runs-on: ubuntu-latest
  needs: sonarqube
  steps:
  - name: Checkout code
    uses: actions/checkout@v4
  - name: docker login
    uses: docker/login-action@v3
    with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v3

  - name: build docker image
    uses: docker/build-push-action@v4
    with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/blueberryblog:v1.0
 deploy:
  runs-on: ubuntu-latest
  needs: docker
  steps:
  - name: Checkout code
    uses: actions/checkout@v4
  - name: Set up kubectl
    uses: azure/setup-kubectl@v3
    with:
        version: 'latest'
  - name: set up Kubeconfig
    run: |
       mkdir -p $HOME/.kube
       echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
       chmod 600 $HOME/.kube/config
  - name: Deploy to Kubernetes
    run: |
          kubectl apply -f k8s-deployment.yaml
          kubectl apply -f k8s-service.yaml
          kubectl apply -f k8s/k8s-ingress.yaml
  - name: Wait for deployment to be ready
    run: |
        kubectl rollout status deployment/blueberryblog-app --timeout=60s
        kubectl get pods -l app=blueberryblog-app
  
